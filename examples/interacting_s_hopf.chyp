# In this document, we'll define two special symmetric Frobenius algebras that
# interact as a bialgebra. For convenience, we'll give local names and colors
# for the generators of the two Frobenius algebras:

gen m1 : 2 -> 1   "d8f8d8"
gen u1 : 0 -> 1   "d8f8d8"
gen n1 : 1 -> 2   "d8f8d8"
gen v1 : 1 -> 0   "d8f8d8"

gen m2 : 2 -> 1   "e8a6a6"
gen u2 : 0 -> 1   "e8a6a6"
gen n2 : 1 -> 2   "e8a6a6"
gen v2 : 1 -> 0   "e8a6a6"


# Cups and caps are derived generators, but we use them a lot, so we'll give
# them local names/colors too.

gen cup1 : 0 -> 2 "d8f8d8"
gen cap1 : 2 -> 0 "d8f8d8"
gen cup2 : 0 -> 2 "e8a6a6"
gen cap2 : 2 -> 0 "e8a6a6"

# These imports make our two sets of generators in special symmetric Frobenius algebras:
import ssfa as F1(m=m1, u=u1, n=n1, v=v1, cup=cup1, cap=cap1)
import ssfa as F2(m=m2, u=u2, n=n2, v=v2, cup=cup2, cap=cap2)

# These imports make the monoid of one SSFA form a Hopf algebra with the comonoid of the other:
import hopf as H1(m=m1, u=u1, n=n2, v=v2)
import hopf as H2(m=m2, u=u2, n=n1, v=v1)

# We additionally assume the units of one algebra can be transposed in the other
rule u1_tr :
  u1 * id ; cap2 = v1

rule u2_tr :
  u2 * id ; cap1 = v2

# From this the analogous rules for counits follows
rewrite v1_tr :
  cup2 ; id * v1
  = cup2 * u1 ; id * sw ; id * cap2 by -u1_tr
  = cup2 * u1 ; id * cap2 by F2.symm_cap
  = u1 by F2.yankL

rewrite v2_tr :
  cup1 ; id * v2
  = cup1 * u2 ; id * sw ; id * cap1 by -u2_tr
  = cup1 * u2 ; id * cap1 by F1.symm_cap
  = u2 by F1.yankL

# We define the dualiser as the cap for F2 followed by the cup for F1:
def d = id * cup1 ; cap2 * id

# The dualiser has an inverse, given by:
let d_inv = id * cup2 ; cap1 * id

rewrite d_d_inv :
  d ; d_inv
  = cup1 * id ; sw[1, 2, 0] ; d_inv * cap2 by d_def
  = cup2 * id ; sw[2, 0, 1] ; cap2 * id by F1.yankL
  = id by F2.yankR

rewrite d_inv_d :
  d_inv ; d
  = d_inv * cup1 ; cap2 * id by d_def
  = cup1 * id ; sw[2, 0, 1] ; cap1 * id by F2.yankL
  = id by F1.yankR

# The dualiser preserves (co)units
rewrite d_v2 :
  d ; v2
  = cup1 * id ; sw[1, 2, 0] ; v2 * cap2 by d_def
  = u2 * id ; sw ; cap2 by v2_tr
  = u2 * id ; sw ; m2 ; v2 by F2.cap_def
  = v2 by F2.unitR

# We can prove the dualiser behaves as an antipode for H2
rewrite d_antip_H2 :
  n1 ; id * d ; m2
  = n1 * cup1 ; id * sw[2, 0, 1] ; m2 * cap2 by d_def
  = n1 * cup1 ; id * sw * id ; m2 * cap2 by F1.symm_cup
  = n1 * u1 ; id * id * n1 ; id * sw * id ; m2 * cap2 by F1.cup_def
  = n1 * u1 ; id * id * n1 ; id * sw * id ; m2 * m2 ; id * v2 by F2.cap_def
  = id * u1 ; m2 ; n1 ; id * v2 by -H2.bialg
  = u1 * id ; n2 * id ; sw[1, 2, 0] ; n1 * cap2 ; id * v2 by -F2.n_capL
  = u1 * u1 * id ; sw[1, 2, 0] ; n1 * cap2 ; id * v2 by H1.ucp
  = u1 * cup1 * id ; sw[1, 3, 0, 2] ; id * cap2 * v2 by -F1.cup_def
  = u1 * cup1 * id ; sw * sw ; id * cap2 * v2 by F2.symm_cap
  = cup1 * v1 ; id * v2 by u1_tr
  = v1 ; u2 by v2_tr

# ...and hence equals H2.s by uniqueness
rewrite d_is_s2 :
  d
  = d * u2 ; sw ; m2 by -H2.unitL
  = u2 * n1 ; id * v1 * d ; m2 by -H2.counitL
  = n1 ; n1 * d ; H2.s * id * id ; m2 * id ; m2 by -H2.antiL
  = n1 ; H2.s * n1 ; m2 * d ; m2 by H2.coassoc
  = n1 ; H2.s * n1 ; id * id * d ; id * m2 ; m2 by H2.assoc
  = n1 * u2 ; H2.s * v1 * id ; m2 by d_antip_H2
  = n1 ; H2.s * v1 by H2.unitR
  = H2.s by H2.counitR

show d_is_s2

# As a consequence, we get that d is an anti-hm for m2:
rewrite d_anti_hm :
  m2 ; d
  = m2 ; H2.s by d_is_s2
  = H2.s * H2.s ; sw ; m2 by H2.s_anti_hm
  = H2.s * d ; sw ; m2 by -d_is_s2
  = d * d ; sw ; m2 by -d_is_s2

# This implies that cap2 is invariant under 'd'
rewrite d_cap2 :
  d * d ; cap2
  = d * d ; m2 ; v2 by F2.cap_def
  = sw ; m2 ; d ; v2 by -d_anti_hm
  = sw ; m2 ; v2 by d_v2
  = sw ; cap2 by -F2.cap_def
  = cap2 by F2.symm_cap

# Now, we can show that d is self-inverse:
rewrite d_self_inv :
  d ; d
  = d * cup2 ; d * id * id ; sw[2, 0, 1] ; cap2 * id by -F2.yankL
  = d * cup2 * cup1 ; sw * sw * id ; id * cap2 * cap2 by d_def
  = d * cup2 * cup1 ; sw * sw[2, 0, 1] ; id * cap2 * cap2 by F1.symm_cup
  = d * cup2 ; id * id * d ; sw * id ; id * cap2 by -d_def
  = cup2 * id ; id * sw ; id * cap2 by d_cap2
  = cup2 * id ; id * cap2 by F2.symm_cap
  = id by F2.yankL

# By uniqueness of the inverse, we get d = d_inv:
rewrite d_is_d_inv :
  d
  = d ; d ; d_inv by -d_d_inv
  = d_inv by d_self_inv

# Hence, the definition of d is color-symmetric
show d_def
show d_is_d_inv

# and d is also an antipode for H1
rewrite d_antip_H1 :
  n2 ; id * d ; m1
  = n2 * cup2 ; id * sw[2, 0, 1] ; m1 * cap1 by d_is_d_inv
  = n2 * cup2 ; id * sw * id ; m1 * cap1 by F2.symm_cup
  = n2 * u2 ; id * id * n2 ; id * sw * id ; m1 * cap1 by F2.cup_def
  = n2 * u2 ; id * id * n2 ; id * sw * id ; m1 * m1 ; id * v1 by F1.cap_def
  = id * u2 ; m1 ; n2 ; id * v1 by -H1.bialg
  = u2 * id ; n1 * id ; sw[1, 2, 0] ; n2 * cap1 ; id * v1 by -F1.n_capL
  = u2 * u2 * id ; sw[1, 2, 0] ; n2 * cap1 ; id * v1 by H2.ucp
  = u2 * cup2 * id ; sw[1, 3, 0, 2] ; id * cap1 * v1 by -F2.cup_def
  = u2 * cup2 * id ; sw * sw ; id * cap1 * v1 by F1.symm_cap
  = cup2 * v2 ; id * v1 by u2_tr
  = v2 ; u1 by v1_tr

# ...and hence equals H1.s by uniqueness
rewrite d_is_s1 :
  d
  = d * u1 ; sw ; m1 by -H1.unitL
  = u1 * n2 ; id * v2 * d ; m1 by -H1.counitL
  = n2 ; n2 * d ; H1.s * id * id ; m1 * id ; m1 by -H1.antiL
  = n2 ; H1.s * n2 ; m1 * d ; m1 by H1.coassoc
  = n2 ; H1.s * n2 ; id * id * d ; id * m1 ; m1 by H1.assoc
  = n2 * u1 ; H1.s * v2 * id ; m1 by d_antip_H1
  = n2 ; H1.s * v2 by H1.unitR
  = H1.s by H1.counitR

# finally, this implies that the two antipodes (which both equal d) coincide:
rewrite s1_is_s2 :
  H1.s
  = d by -d_is_s1
  = H2.s by d_is_s2

show s1_is_s2

